image: ghcr.io/siemens/kas/kas-isar:3.1

variables:
  GIT_STRATEGY: clone
  release: bullseye
  extension: none
  use_rt: enable
  wic_targz: enable
  targz: disable
  dtb: none
  deploy: enable
  deploy_kernelci: disable
  repro_image1: image1
  repro_image2: image2

stages:
  - build1
  - build2
  - repro-check

default:
  before_script:
    - export http_proxy=$HTTP_PROXY
    - export https_proxy=$HTTPS_PROXY
    - export ftp_proxy=$FTP_PROXY
    - export no_proxy=$NO_PROXY
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export DISTRO_APT_PREMIRRORS=$DISTRO_APT_PREMIRRORS

.build_base:
  stage: build
  tags:
    - large
  variables:
    base_yaml: "kas-cip.yml:kas/board/${target}.yml"
  script:
    - if [ "${use_rt}" = "enable" ]; then base_yaml="${base_yaml}:kas/opt/rt.yml"; fi
    - if [ "${extension}" != "none" ]; then base_yaml="${base_yaml}:kas/opt/${extension}.yml"; fi
    - if [ "${wic_targz}" = "enable" ]; then base_yaml="${base_yaml}:kas/opt/wic-targz-img.yml"; fi
    - if [ "${targz}" = "enable" ]; then base_yaml="${base_yaml}:kas/opt/targz-img.yml"; fi
    - if [ "${release}" = "buster" ]; then base_yaml="${base_yaml}:kas/opt/buster.yml"; fi
    - if [ "${release}" = "bullseye" ]; then base_yaml="${base_yaml}:kas/opt/bullseye.yml"; fi
    - echo "Building ${base_yaml}"
    - kas build ${base_yaml}
    - if [ "${deploy}" = "enable" ]; then scripts/deploy-cip-core.sh ${release} ${target} ${extension} ${dtb} ${CI_COMMIT_REF_SLUG}; fi
    - if [ "${deploy_kernelci}" = "enable" ]; then scripts/deploy-kernelci.py ${release} ${target} ${extension} ${dtb}; fi

.repro-build:
  variables:
    use_rt: disable
    wic_targz: disable
    targz: disable
    deploy: disable
    deploy_kernelci: disable
    base_yaml: "kas-cip.yml:kas/board/${target}.yml:rb.yml"
  extends:
    - .build_base
  before_script:
    - scripts/generate-rb-yaml.sh
  after_script:
    - mv build/tmp/deploy/images/${target}/cip-core-image-cip-core-${release}-${target}.tar.gz ${image_name} 
  artifacts:
    expire_in: 2 hour
    paths:
      - ${image_name}

.repro-build1:
  stage: build1
  extends:
    - .repro-build
  variables:
    image_name: ${repro_image1}

.repro-build2:
  stage: build2
  extends:
    - .repro-build
  variables:
    image_name: ${repro_image2}

.repro-test:
  image:
    name: debian:bullseye
  stage: repro-check
  tags:
    - large
  variables:
    GIT_STRATEGY: none
  before_script:
    - apt update && DEBIAN_FRONTEND=noninteractive apt install -y diffoscope
  script:
    - diffoscope --text diffoscope_output.txt ${repro_image1} ${repro_image2}
  artifacts:
    when: always
    expire_in: 1 day
    paths:
      - diffoscope_output.txt

build1:qemu-amd64-base-repro-build:
  extends:
    - .repro-build1
  variables:
    target: qemu-amd64
    targz: enable

build2:qemu-amd64-base-repro-build:
  extends:
    - .repro-build2
  variables:
    target: qemu-amd64
    targz: enable

test:qemu-amd64-base-repro-test:
  extends:
    - .repro-test
  dependencies:
    - build1:qemu-amd64-base-repro-build
    - build2:qemu-amd64-base-repro-build
